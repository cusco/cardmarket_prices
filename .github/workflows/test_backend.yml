# This workflow will install Python dependencies, run tests and lint with a single version of Python

name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main, staging ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Validate_and_Test:
    runs-on: ubuntu-latest

    permissions:
      statuses: write
      checks: write
      contents: read
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Cache dependencies
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          .venv
        key: ${{ runner.os }}-python-3.11-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-3.11-
          ${{ runner.os }}-python-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify installation
      run: |
        python --version
        pip list | head -20
        echo "Django version: $(python -c 'import django; print(django.get_version())')"

    - name: System info (on failure)
      if: failure()
      run: |
        echo "=== System Information ==="
        uname -a
        df -h
        free -h
        echo "=== Python Environment ==="
        which python
        python --version
        pip --version
        echo "=== Installed Packages ==="
        pip list
        echo "=== Environment Variables ==="
        env | grep -E "(PYTHON|DJANGO|PATH)" | sort

#    - name: upterm
#      uses: lhotari/action-upterm@v1

#    - name: Run migrations
#      run: |
#        cd src
#        ./manage.py migrate

#    - name: Set-up Scripts
#      run: |
#        git submodule init
#        git submodule update
#        ./scripts/get_static_validation_backend.sh

    - name: Static Validation
      id: validation
      run: |
        echo "Starting static validation..."
        ./scripts/static_validate_ci_backend.sh
        echo "Static validation completed successfully"

    - name: Debug validation failure
      if: failure() && steps.validation.outcome == 'failure'
      run: |
        echo "=== Static Validation Failed ==="
        echo "Checking for common issues..."
        
        echo "=== Current Directory ==="
        pwd
        ls -la
        
        echo "=== Django Settings Check ==="
        cd src || echo "src directory not found"
        python -c "import django; django.setup()" || echo "Django setup failed"
        
        echo "=== Scripts Directory ==="
        cd "$GITHUB_WORKSPACE"
        ls -la scripts/ || echo "scripts directory not found"
        
        echo "=== Recent Files ==="
        find . -name "*.py" -mtime -1 -exec echo "Recently modified: {}" \; || echo "No recent Python files found"

    - name: Upload validation reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-reports
        path: |
          report_*.xml
          htmlcov/
          *.log
        retention-days: 30

    - name: Test Reporter
      uses: dorny/test-reporter@v2
      if: always()
      with:
        name: Static Validation Report
        path: report_*.xml
        reporter: java-junit
        fail-on-error: false
        